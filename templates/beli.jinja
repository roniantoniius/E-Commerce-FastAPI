    {% extends 'base.html' %}
    
    {% block title %}Daftar Belanja - Warung Omega{% endblock %}
    
    {% block content %}
    <div class="container mt-4">
        <br>
        <h1 style="text-align: center;">Daftar Belanja Anda, <strong>{{ username }}</strong></h1>
        <br>
        <div id="cart-items">
            {% if not username %}
            <script>
                document.addEventListener('DOMContentLoaded', function() {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Oops...',
                        text: 'Kamu harus login terlebih dahulu untuk melihat produk yang kamu beli, sebentar kok :).',
                        confirmButtonText: 'Login Sekarang',
                        confirmButtonColor: '#3085d6',
                        allowOutsideClick: false,
                        allowEscapeKey: false
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = "/";
                        }
                    });
                });
            </script>
            {% else %}
            <div class="accordion" id="accordionExample">
                <div class="accordion-item">
                    <h1 class="accordion-header" id="headingOne" style="background-color: white; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);">
                        <button class="accordion-button d-flex justify-content-between align-items-center" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne" style="background-color: white; box-shadow: none;">
                            <img src="{{ url_for('static', path='images/logo putih omega-no bg.png') }}" alt="logo" class="mb-logo" style="width: 200px; height: auto;">
                            <h4 class="fw-bold" style="flex-grow: 1; text-align: right; font-weight: bold; padding-right: 10px;">Total Harga: <span id="total-price">Rp 0</span></h4>

                        </button>
                    </h1>
                    <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            

                            <!-- Loop through beli_list items -->
                            {% for beli in beli_list %}
                            <div class="cart-item row mb-3 align-items-center" id="cart-item-{{ beli.beli_id }}">
                                <div class="col-md-6 d-flex align-items-center">
                                    <!-- Delete icon -->
                                    <div class="mr-3">
                                        <a href="javascript:void(0);" onclick="confirmDelete({{ beli.beli_id }}, '{{ beli.product.name }}', '{{ beli.beli_id }}')">
                                            <img src="/static/images/wrong-svgrepo-com.svg" alt="Hapus" class="delete-icon" style="height: 30px; width: 30px;">
                                        </a>
                                    </div>
                                
                                    <!-- Product image -->
                                    <div class="mr-3">
                                        <img src="/static/images/{{ beli.product.product_image }}" class="img-fluid" alt="{{ beli.product.name }}" style="max-height: 100px;">
                                    </div>
                                
                                    <!-- Product name and quantity -->
                                    <div class="flex-grow-1">
                                        <h5>{{ beli.product.name }}</h5>
                                        <p>Kuantitas (items): <strong>{{ beli.kuantitas }}</strong></p>
                                    </div>
                                </div>
                            
                                <!-- Price section -->
                                <div class="col-md-6 text-right">
                                    <h5 style="flex-grow: 1; text-align: right; font-weight: bold;">Rp {{ beli.harga_total }}</h5>
                                </div>
                            </div>
                            <hr>
                            {% endfor %}
                            <div style="text-align: center;">
                                <div style="display: inline-flex; justify-content: center;">
                                  <form id="transaksi-form" method="POST" action="/transaksis" onsubmit="submitTransaksi(event)">
                                    <input type="hidden" name="total" id="total-input">
                                    <button type="submit" class="btn-flat btn-hover">Beli</button>
                                  </form>
                                  <button id="midtrans-button" class="btn-flat btn-hover" style="background-color: #f4a255; color: #fff; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin-left: 10px;">Belanja
                                  </button>
                                </div>
                            </div>
                            
                        </div>
                    </div>
                </div>
            </div>
            <div style="text-align: center; padding-top: 20px;">
                <div style="display: inline-flex; justify-content: center;">
                  <a href="/transaksis/{{ username }}"><button class="btn-flat btn-hover">Daftar Transaksi Anda</button></a>
                </div>
            </div>
            <br>
            {% endif %}
        </div>
    </div>
    
    <script src="https://app.sandbox.midtrans.com/snap/snap.js" data-client-key="{{ client_key }}"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sval@0.4.9/dist/sval.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sval@0.4.9/lib/sval.min.js"></script>

    <script>
        async function fetchBelis() {
            try {
                const response = await fetch('/belis/me', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include'  // Sertakan cookies seperti token untuk autentikasi
                });
            
                if (!response.ok) {
                    throw new Error('Gagal mengautentikasi pengguna. Harap login kembali.');
                }
            
                const result = await response.json();
                if (result.status === "ok") {
                    renderBeliItems(result.data);
                } else {
                    console.error("Gagal mengambil data: ", result.message);
                }
            } catch (error) {
                console.error("Terjadi kesalahan saat mengambil data belanja: ", error);
            }
        }

        function calculateTotalPrice() {
            // ambil semua harga_total
            let totalPrice = 0;
            const hargaElements = document.querySelectorAll('.cart-item h5');

            hargaElements.forEach(hargaElement => {
                let hargaText = hargaElement.innerText.replace('Rp', '').trim();
                hargaText = hargaText.split('.')[0];
                hargaText = hargaText.replace(/\./g, '');

                let harga = parseInt(hargaText, 10);

                if (!isNaN(harga)) {
                    totalPrice += harga;
                }
            });

            // update
            document.getElementById('total-price').innerText = 'Rp ' + totalPrice.toLocaleString('id-ID');
            document.getElementById('total-input').value = totalPrice;
        }

        function submitTransaksi(event) {
            event.preventDefault(); // Mencegah submit form secara default
        
            const totalValue = parseFloat(document.getElementById('total-input').value);
        
            if (totalValue <= 0) {
                Swal.fire({
                    title: 'Total harga tidak valid!',
                    text: 'Mohon masukkan jumlah yang valid.',
                    icon: 'warning'
                });
                return;
            }
        
            Swal.fire({
                title: 'Konfirmasi Transaksi',
                text: `Apakah Anda yakin ingin melanjutkan pembelian dengan total Rp ${totalValue.toLocaleString('id-ID')}?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Ya, Lanjutkan',
                cancelButtonText: 'Batal'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/transaksis', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify({
                            total: totalValue
                        })
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Terjadi kesalahan saat membuat transaksi.');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.status === "ok") {
                            window.location.href = `/transaksis/${data.username}`;
                        } else {
                            console.error("Gagal membuat transaksi: ", data.message);
                            Swal.fire({
                                title: 'Gagal',
                                text: 'Gagal membuat transaksi. ' + data.message,
                                icon: 'error'
                            });
                        }
                    })
                    .catch(error => {
                        console.error("Terjadi kesalahan: ", error);
                        Swal.fire({
                            title: 'Kesalahan',
                            text: 'Terjadi kesalahan saat membuat transaksi. Harap coba lagi.',
                            icon: 'error'
                        });
                    });
                } else {
                    Swal.fire({
                        title: 'Dibatalkan',
                        text: 'Transaksi dibatalkan.',
                        icon: 'info'
                    });
                }
            });
        }


        // Render beli items
        document.addEventListener('DOMContentLoaded', () => {
            calculateTotalPrice();
        });

        async function confirmDelete(beliId, productName, elementId) {
            const result = await Swal.fire({
                title: 'Apakah Anda yakin?',
                text: `Anda akan menghapus ${productName} dari daftar belanja.`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Hapus',
                cancelButtonText: 'Batal'
            });
        
            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/belis/${beliId}/hapus`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include'
                    });
                
                    if (!response.ok) {
                        console.error(`Gagal menghapus item. Status code: ${response.status}`);
                        throw new Error('Gagal menghapus item.');
                    }
                
                    const result = await response.json().catch(() => ({}));
                    console.log("Respons penghapusan: ", result);
                
                    document.getElementById(`cart-item-${beliId}`).remove();
                    Swal.fire(
                        'Terhapus!',
                        `${productName} telah dihapus dari daftar belanja.`,
                        'success'
                    ).then(() => {
                        location.reload();
                    });
                } catch (error) {
                    console.error("Terjadi kesalahan saat menghapus item: ", error);
                    Swal.fire(
                        'Gagal!',
                        'Terjadi kesalahan saat menghapus item.',
                        'error'
                    );
                }
            }
        }

        document.getElementById("midtrans-button").addEventListener("click", function() {
            const totalValue = parseFloat(document.getElementById('total-input').value);
            const username = "{{ username }}"; // Ambil username dari template

            fetch('/transaksis/initiate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    total: totalValue,
                    username: username
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === "ok") {
                    // Tampilkan Snap
                    window.snap.pay(data.token, {
                        onSuccess: function(result) {
                            console.log(result);
                            // Kirim konfirmasi pembayaran ke backend
                            confirmPayment(data.order_id);
                        },
                        onPending: function(result) {
                            console.log(result);
                        },
                        onError: function(result) {
                            console.log(result);
                        },
                        onClose: function() {
                            console.log('Customer closed the popup without finishing the payment');
                        }
                    });
                } else {
                    console.error("Gagal memulai transaksi: ", data.message);
                }
            })
            .catch(error => {
                console.error("Terjadi kesalahan: ", error);
            });
        });

        function confirmPayment(orderId) {
            fetch(`/transaksis/callback`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    order_id: orderId
                })
            })
            .then(response => response.json())
            .then(data => {
                console.log(data);
                // Lakukan tindakan setelah konfirmasi pembayaran
            })
            .catch(error => {
                console.error("Terjadi kesalahan saat mengkonfirmasi pembayaran: ", error);
            });
        }
    </script>
    {% endblock %}